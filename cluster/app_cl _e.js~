const cluster = require('cluster');
const http = require('http');
const numCPUs = require('os').cpus().length;

if (cluster.isMaster) {
  masterProcess();
} else {
  childProcess();  
};

 

function masterProcess() {
  console.log(`Master ${process.pid} is running`);
 
  var workers = [];
  // Fork workers
  for (let i = 0; i < numCPUs; i++) {
    console.log(`Forking process number ${i}...`);

    const worker = cluster.fork();
    workers.push(worker);

    // Listen for messages from worker
    worker.on('message', function(message) {
      console.log(`Master ${process.pid} recevies message '${JSON.stringify(message)}' from worker ${worker.process.pid}`);
    });
  }
  
//http.createServer(function (req, res) {
//    res.writeHead(200, {'Content-Type': 'text/html'});
//   
//   let promise = new Promise((resolve, reject) => {
//
//  setInterval(() => {
//    // переведёт промис в состояние fulfilled с результатом "result"
//    res.write(Math.floor(Math.random() * 1000).toString() + ' ');
//}, 30000);
//    
//   });
//   promise
//  //.then (()=>{resolve()})  
//  .catch(error => {
//      // вторая функция - запустится при вызове reject
//      console.log("Rejected: " + error); // error - аргумент reject
//    }
//  );  
//    
//   
//}).listen(8080);
  // Send message to the workers
  workers.forEach(function(worker) {
    console.log(`Master ${process.pid} sends message to worker ${worker.process.pid}...`);
    worker.send({ msg: `Message from master ${process.pid}` });    
  }, this);
};

function childProcess() {
  console.log(`Worker ${process.pid} started`);
http.createServer(function (req, res) {
    res.writeHead(200, {'Content-Type': 'text/html'});
   
   let promise = new Promise((resolve, reject) => {

  setInterval(() => {
    // переведёт промис в состояние fulfilled с результатом "result"
    res.write(Math.floor(Math.random() * 1000).toString() + ' ');
}, 1000);
    
   });
   promise
  //.then (()=>{resolve()})  
  .catch(error => {
      // вторая функция - запустится при вызове reject
      console.log("Rejected: " + error); // error - аргумент reject
    }
  );  
    
   
}).listen(8083);
  process.on('message', function(message) {
    console.log(`Worker ${process.pid} recevies message '${JSON.stringify(message)}'`);
  });

  console.log(`Worker ${process.pid} sends message to master...`);
  process.send({ msg: `Message from worker ${process.pid}` });

  console.log(`Worker ${process.pid} finished`);
};

